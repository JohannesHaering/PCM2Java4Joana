/**
 */
package correspondences.provider;

import correspondences.util.CorrespondencesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CorrespondencesItemProviderAdapterFactory extends CorrespondencesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CorrespondencesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.CorrespondenceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CorrespondenceElementItemProvider correspondenceElementItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.CorrespondenceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCorrespondenceElementAdapter() {
		if (correspondenceElementItemProvider == null) {
			correspondenceElementItemProvider = new CorrespondenceElementItemProvider(this);
		}

		return correspondenceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.PCMComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMComponentItemProvider pcmComponentItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.PCMComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMComponentAdapter() {
		if (pcmComponentItemProvider == null) {
			pcmComponentItemProvider = new PCMComponentItemProvider(this);
		}

		return pcmComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.SourceCodeClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceCodeClassItemProvider sourceCodeClassItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.SourceCodeClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceCodeClassAdapter() {
		if (sourceCodeClassItemProvider == null) {
			sourceCodeClassItemProvider = new SourceCodeClassItemProvider(this);
		}

		return sourceCodeClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.SourceCodeMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceCodeMethodItemProvider sourceCodeMethodItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.SourceCodeMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceCodeMethodAdapter() {
		if (sourceCodeMethodItemProvider == null) {
			sourceCodeMethodItemProvider = new SourceCodeMethodItemProvider(this);
		}

		return sourceCodeMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.PCMProvidedInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMProvidedInterfaceItemProvider pcmProvidedInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.PCMProvidedInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMProvidedInterfaceAdapter() {
		if (pcmProvidedInterfaceItemProvider == null) {
			pcmProvidedInterfaceItemProvider = new PCMProvidedInterfaceItemProvider(this);
		}

		return pcmProvidedInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.PCMMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMMethodItemProvider pcmMethodItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.PCMMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMMethodAdapter() {
		if (pcmMethodItemProvider == null) {
			pcmMethodItemProvider = new PCMMethodItemProvider(this);
		}

		return pcmMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.SourceCodeParamter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceCodeParamterItemProvider sourceCodeParamterItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.SourceCodeParamter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceCodeParamterAdapter() {
		if (sourceCodeParamterItemProvider == null) {
			sourceCodeParamterItemProvider = new SourceCodeParamterItemProvider(this);
		}

		return sourceCodeParamterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.PCMParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMParameterItemProvider pcmParameterItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.PCMParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMParameterAdapter() {
		if (pcmParameterItemProvider == null) {
			pcmParameterItemProvider = new PCMParameterItemProvider(this);
		}

		return pcmParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.ComponentCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentCorrespondenceItemProvider componentCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.ComponentCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentCorrespondenceAdapter() {
		if (componentCorrespondenceItemProvider == null) {
			componentCorrespondenceItemProvider = new ComponentCorrespondenceItemProvider(this);
		}

		return componentCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.MethodCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodCorrespondenceItemProvider methodCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.MethodCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodCorrespondenceAdapter() {
		if (methodCorrespondenceItemProvider == null) {
			methodCorrespondenceItemProvider = new MethodCorrespondenceItemProvider(this);
		}

		return methodCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link correspondences.ParameterCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterCorrespondenceItemProvider parameterCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link correspondences.ParameterCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterCorrespondenceAdapter() {
		if (parameterCorrespondenceItemProvider == null) {
			parameterCorrespondenceItemProvider = new ParameterCorrespondenceItemProvider(this);
		}

		return parameterCorrespondenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (correspondenceElementItemProvider != null) correspondenceElementItemProvider.dispose();
		if (pcmComponentItemProvider != null) pcmComponentItemProvider.dispose();
		if (sourceCodeClassItemProvider != null) sourceCodeClassItemProvider.dispose();
		if (sourceCodeMethodItemProvider != null) sourceCodeMethodItemProvider.dispose();
		if (pcmProvidedInterfaceItemProvider != null) pcmProvidedInterfaceItemProvider.dispose();
		if (pcmMethodItemProvider != null) pcmMethodItemProvider.dispose();
		if (sourceCodeParamterItemProvider != null) sourceCodeParamterItemProvider.dispose();
		if (pcmParameterItemProvider != null) pcmParameterItemProvider.dispose();
		if (componentCorrespondenceItemProvider != null) componentCorrespondenceItemProvider.dispose();
		if (methodCorrespondenceItemProvider != null) methodCorrespondenceItemProvider.dispose();
		if (parameterCorrespondenceItemProvider != null) parameterCorrespondenceItemProvider.dispose();
	}

}
